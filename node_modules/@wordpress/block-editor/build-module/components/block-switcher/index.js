import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { castArray, uniq } from 'lodash';
/**
 * WordPress dependencies
 */

import { __, _n, sprintf } from '@wordpress/i18n';
import { DropdownMenu, ToolbarButton, ToolbarGroup, ToolbarItem } from '@wordpress/components';
import { switchToBlockType, store as blocksStore } from '@wordpress/blocks';
import { useSelect, useDispatch } from '@wordpress/data';
import { stack } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
import useBlockDisplayInformation from '../use-block-display-information';
import BlockIcon from '../block-icon';
import BlockTransformationsMenu from './block-transformations-menu';
import BlockStylesMenu from './block-styles-menu';
export var BlockSwitcherDropdownMenu = function BlockSwitcherDropdownMenu(_ref) {
  var clientIds = _ref.clientIds,
      blocks = _ref.blocks;

  var _useDispatch = useDispatch(blockEditorStore),
      replaceBlocks = _useDispatch.replaceBlocks;

  var blockInformation = useBlockDisplayInformation(blocks[0].clientId);

  var _useSelect = useSelect(function (select) {
    var _select = select(blockEditorStore),
        getBlockRootClientId = _select.getBlockRootClientId,
        getBlockTransformItems = _select.getBlockTransformItems;

    var _select2 = select(blocksStore),
        getBlockStyles = _select2.getBlockStyles,
        getBlockType = _select2.getBlockType;

    var rootClientId = getBlockRootClientId(castArray(clientIds)[0]);

    var _blocks = _slicedToArray(blocks, 1),
        firstBlockName = _blocks[0].name;

    var _isSingleBlockSelected = blocks.length === 1;

    var styles = _isSingleBlockSelected && getBlockStyles(firstBlockName);

    var _icon;

    if (_isSingleBlockSelected) {
      _icon = blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon; // Take into account active block variations.
    } else {
      var _getBlockType;

      var isSelectionOfSameType = uniq(blocks.map(function (_ref2) {
        var name = _ref2.name;
        return name;
      })).length === 1; // When selection consists of blocks of multiple types, display an
      // appropriate icon to communicate the non-uniformity.

      _icon = isSelectionOfSameType ? (_getBlockType = getBlockType(firstBlockName)) === null || _getBlockType === void 0 ? void 0 : _getBlockType.icon : stack;
    }

    return {
      possibleBlockTransformations: getBlockTransformItems(blocks, rootClientId),
      hasBlockStyles: !!(styles !== null && styles !== void 0 && styles.length),
      icon: _icon
    };
  }, [clientIds, blocks, blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon]),
      possibleBlockTransformations = _useSelect.possibleBlockTransformations,
      hasBlockStyles = _useSelect.hasBlockStyles,
      icon = _useSelect.icon;

  var onTransform = function onTransform(name) {
    return replaceBlocks(clientIds, switchToBlockType(blocks, name));
  };

  var hasPossibleBlockTransformations = !!possibleBlockTransformations.length;

  if (!hasBlockStyles && !hasPossibleBlockTransformations) {
    return createElement(ToolbarGroup, null, createElement(ToolbarButton, {
      disabled: true,
      className: "block-editor-block-switcher__no-switcher-icon",
      title: __('Block icon'),
      icon: createElement(BlockIcon, {
        icon: icon,
        showColors: true
      })
    }));
  }

  var blockSwitcherLabel = 1 === blocks.length ? __('Change block type or style') : sprintf(
  /* translators: %s: number of blocks. */
  _n('Change type of %d block', 'Change type of %d blocks', blocks.length), blocks.length);
  return createElement(ToolbarGroup, null, createElement(ToolbarItem, null, function (toggleProps) {
    return createElement(DropdownMenu, {
      className: "block-editor-block-switcher",
      label: blockSwitcherLabel,
      popoverProps: {
        position: 'bottom right',
        isAlternate: true,
        className: 'block-editor-block-switcher__popover'
      },
      icon: createElement(BlockIcon, {
        icon: icon,
        className: "block-editor-block-switcher__toggle",
        showColors: true
      }),
      toggleProps: toggleProps,
      menuProps: {
        orientation: 'both'
      }
    }, function (_ref3) {
      var onClose = _ref3.onClose;
      return (hasBlockStyles || hasPossibleBlockTransformations) && createElement("div", {
        className: "block-editor-block-switcher__container"
      }, hasPossibleBlockTransformations && createElement(BlockTransformationsMenu, {
        className: "block-editor-block-switcher__transforms__menugroup",
        possibleBlockTransformations: possibleBlockTransformations,
        blocks: blocks,
        onSelect: function onSelect(name) {
          onTransform(name);
          onClose();
        }
      }), hasBlockStyles && createElement(BlockStylesMenu, {
        hoveredBlock: blocks[0],
        onSwitch: onClose
      }));
    });
  }));
};
export var BlockSwitcher = function BlockSwitcher(_ref4) {
  var clientIds = _ref4.clientIds;
  var blocks = useSelect(function (select) {
    return select(blockEditorStore).getBlocksByClientId(clientIds);
  }, [clientIds]);

  if (!blocks.length || blocks.some(function (block) {
    return !block;
  })) {
    return null;
  }

  return createElement(BlockSwitcherDropdownMenu, {
    clientIds: clientIds,
    blocks: blocks
  });
};
export default BlockSwitcher;
//# sourceMappingURL=index.js.map