{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["castArray","flatMap","first","isArray","isBoolean","last","map","reduce","some","find","filter","mapKeys","orderBy","createSelector","getBlockType","getBlockTypes","hasBlockSupport","getPossibleBlockTransformations","parse","SVG","Rect","G","Path","Platform","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","templateIcon","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","innerBlocks","areInnerBlocksControlled","getBlocks","cache","__unstableGetBlockWithoutInnerBlocks","rootClientId","getBlockOrder","order","id","__unstableGetBlockWithBlockTree","__unstableGetBlockTree","getClientIdsOfDescendants","clientIds","descendants","getClientIdsWithDescendants","topLevelIds","getGlobalBlockCount","blockName","length","accumulator","getBlocksByClientId","getBlockCount","getSelectionStart","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","push","reverse","getBlockParentsByBlockName","Array","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","insertionPointVisibility","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","canInsertBlockTypeUnmemoized","checkAllowList","list","item","defaultResult","blockType","getSettings","allowedBlockTypes","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","canInsertBlockType","canInsertBlocks","every","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","icon","title","description","example","hasOwnProperty","initialAttributes","keywords","calculateFrecency","time","count","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","frecency","inserterVariations","variations","scope","category","utility","getInserterItems","buildBlockTypeInserterItem","buildReusableBlockInserterItem","reusableBlock","referencedBlocks","__experimentalGetParsedReusableBlock","referencedBlockType","ref","raw","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","visibleBlockTypeInserterItems","isDefault","blockVariations","variationMapper","getBlockTransformItems","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","possibleTransforms","possibleBlockTransformations","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","value","key","content","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tflatMap,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n\tmapKeys,\n\torderBy,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n} from '@wordpress/blocks';\nimport { SVG, Rect, G, Path } from '@wordpress/components';\nimport { Platform } from '@wordpress/element';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\nconst templateIcon = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Rect x=\"0\" fill=\"none\" width=\"24\" height=\"24\" />\n\t\t<G>\n\t\t\t<Path d=\"M19 3H5c-1.105 0-2 .895-2 2v14c0 1.105.895 2 2 2h14c1.105 0 2-.895 2-2V5c0-1.105-.895-2-2-2zM6 6h5v5H6V6zm4.5 13C9.12 19 8 17.88 8 16.5S9.12 14 10.5 14s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zm3-6l3-5 3 5h-6z\" />\n\t\t</G>\n\t</SVG>\n);\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport const getBlock = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: areInnerBlocksControlled( state, clientId )\n\t\t\t\t? EMPTY_ARRAY\n\t\t\t\t: getBlocks( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\t// Normally, we'd have both `getBlockAttributes` dependencies and\n\t\t// `getBlocks` (children) dependancies here but for performance reasons\n\t\t// we use a denormalized cache key computed in the reducer that takes both\n\t\t// the attributes and inner blocks into account. The value of the cache key\n\t\t// is being changed whenever one of these dependencies is out of date.\n\t\tstate.blocks.cache[ clientId ],\n\t]\n);\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * Note: It's important to memoize this selector to avoid return a new instance\n * on each call. We use the block cache state for each top-level block of the\n * given clientID. This way, the selector only refreshes on changes to blocks\n * associated with the given entity, and does not refresh when changes are made\n * to blocks which are part of different inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const getBlocks = createSelector(\n\t( state, rootClientId ) => {\n\t\treturn map( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state, rootClientId ) =>\n\t\tmap(\n\t\t\tstate.blocks.order[ rootClientId || '' ],\n\t\t\t( id ) => state.blocks.cache[ id ]\n\t\t)\n);\n\n/**\n * Similar to getBlock, except it will include the entire nested block tree as\n * inner blocks. The normal getBlock selector will exclude sections of the block\n * tree which belong to different entities.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} The block with all\n */\nexport const __unstableGetBlockWithBlockTree = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t\tinnerBlocks: __unstableGetBlockTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Similar to getBlocks, except this selector returns the entire block tree\n * represented in the block-editor store from the given root regardless of any\n * inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport const __unstableGetBlockTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetBlockWithBlockTree( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants\n * of the blocks given.\n *\n * @param {Object} state Global application state.\n * @param {Array} clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = ( state, clientIds ) =>\n\tflatMap( clientIds, ( clientId ) => {\n\t\tconst descendants = getBlockOrder( state, clientId );\n\t\treturn [\n\t\t\t...descendants,\n\t\t\t...getClientIdsOfDescendants( state, descendants ),\n\t\t];\n\t} );\n\n/**\n * Returns an array containing the clientIds of the top-level blocks\n * and their descendants of any depth (for nested blocks).\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst topLevelIds = getBlockOrder( state );\n\t\treturn [\n\t\t\t...topLevelIds,\n\t\t\t...getClientIdsOfDescendants( state, topLevelIds ),\n\t\t];\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state ) => [\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t]\n);\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     Block client ID.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText( state ) {\n\treturn state.isCaretWithinFormattedText;\n}\n\n/**\n * Returns the insertion point. This will be:\n *\n * 1) The insertion point manually set using setInsertionPoint() or\n *    showInsertionPoint(); or\n * 2) The point after the current block selection, if there is a selection; or\n * 3) The point at the end of the block list.\n *\n * Components like <Inserter> will default to inserting blocks at this point.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object} Insertion point object with `rootClientId` and `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst { insertionPoint, selectionEnd } = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Whether or not the insertion point should be shown to users. This is set\n * using showInsertionPoint() or hideInsertionPoint().\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point should be shown.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPointVisibility;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n * @return {?Array}        Block Template\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tconst checkAllowList = ( list, item, defaultResult = null ) => {\n\t\tif ( isBoolean( list ) ) {\n\t\t\treturn list;\n\t\t}\n\t\tif ( isArray( list ) ) {\n\t\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t\t// the following check should be changed to something like:\n\t\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn list.includes( item );\n\t\t}\n\t\treturn defaultResult;\n\t};\n\n\tconst blockType = getBlockType( blockName );\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tif ( hasParentAllowedBlock !== null && hasBlockAllowedParent !== null ) {\n\t\treturn hasParentAllowedBlock || hasBlockAllowedParent;\n\t} else if ( hasParentAllowedBlock !== null ) {\n\t\treturn hasParentAllowedBlock;\n\t} else if ( hasBlockAllowedParent !== null ) {\n\t\treturn hasBlockAllowedParent;\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object} state Global State\n * @param {Object} blockType BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} item Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( item ) => ( variation ) => ( {\n\t...item,\n\tid: `${ item.id }-${ variation.name }`,\n\ticon: variation.icon || item.icon,\n\ttitle: variation.title || item.title,\n\tdescription: variation.description || item.description,\n\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\texample: variation.hasOwnProperty( 'example' )\n\t\t? variation.example\n\t\t: item.example,\n\tinitialAttributes: {\n\t\t...item.initialAttributes,\n\t\t...variation.attributes,\n\t},\n\tinnerBlocks: variation.innerBlocks,\n\tkeywords: variation.keywords || item.keywords,\n} );\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state Editor state.\n * @param {Object} options Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem = ( state, { buildScope = 'inserter' } ) => (\n\tblockType\n) => {\n\tconst id = blockType.name;\n\n\tlet isDisabled = false;\n\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\tisDisabled = some(\n\t\t\tgetBlocksByClientId( state, getClientIdsWithDescendants( state ) ),\n\t\t\t{ name: blockType.name }\n\t\t);\n\t}\n\n\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\tconst blockItemBase = {\n\t\tid,\n\t\tname: blockType.name,\n\t\ttitle: blockType.title,\n\t\ticon: blockType.icon,\n\t\tisDisabled,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\tconst inserterVariations = blockType.variations.filter(\n\t\t( { scope } ) => ! scope || scope.includes( 'inserter' )\n\t);\n\treturn {\n\t\t...blockItemBase,\n\t\tinitialAttributes: {},\n\t\tdescription: blockType.description,\n\t\tcategory: blockType.category,\n\t\tkeywords: blockType.keywords,\n\t\tvariations: inserterVariations,\n\t\texample: blockType.example,\n\t\tutility: 1, // deprecated\n\t};\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\n\t\t\tconst referencedBlocks = __experimentalGetParsedReusableBlock(\n\t\t\t\tstate,\n\t\t\t\treusableBlock.id\n\t\t\t);\n\t\t\tlet referencedBlockType;\n\t\t\tif ( referencedBlocks.length === 1 ) {\n\t\t\t\treferencedBlockType = getBlockType(\n\t\t\t\t\treferencedBlocks[ 0 ].name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon: referencedBlockType\n\t\t\t\t\t? referencedBlockType.icon\n\t\t\t\t\t: templateIcon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // deprecated\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\t// Exclude any block type item that is to be replaced by a default\n\t\t// variation.\n\t\tconst visibleBlockTypeInserterItems = blockTypeInserterItems.filter(\n\t\t\t( { variations = [] } ) =>\n\t\t\t\t! variations.some( ( { isDefault } ) => isDefault )\n\t\t);\n\n\t\tconst blockVariations = [];\n\t\t// Show all available blocks with variations\n\t\tfor ( const item of blockTypeInserterItems ) {\n\t\t\tconst { variations = [] } = item;\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( item );\n\t\t\t\tblockVariations.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t}\n\n\t\treturn [\n\t\t\t...visibleBlockTypeInserterItems,\n\t\t\t...blockVariations,\n\t\t\t...reusableBlockInserterItems,\n\t\t];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = mapKeys(\n\t\t\tblockTypeTransformItems,\n\t\t\t( { name } ) => name\n\t\t);\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tblocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\tconst possibleBlockTransformations = orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t\treturn possibleBlockTransformations;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the Block List settings for an array of blocks, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {Array} clientIds Block client IDs.\n *\n * @return {Array} Block List Settings for each of the found blocks\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds ) => {\n\t\treturn filter( state.blockListSettings, ( value, key ) =>\n\t\t\tclientIds.includes( key )\n\t\t);\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the parsed block saved as shared block with the given ID.\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {Object} The parsed block.\n */\nexport const __experimentalGetParsedReusableBlock = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only reusableBlock.content.raw should be used here, `reusableBlock.content` is a\n\t\t// workaround until #22127 is fixed.\n\t\treturn parse(\n\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean}     Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string}     Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object} state Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selectionStart.clientId,\n\t\tstate.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n"]}