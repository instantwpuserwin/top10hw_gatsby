{"version":3,"sources":["@wordpress/block-editor/src/components/use-on-block-drop/index.js"],"names":["parseDropEvent","event","result","srcRootClientId","srcClientIds","srcIndex","type","blocks","dataTransfer","Object","assign","JSON","parse","getData","err","onBlockDrop","targetRootClientId","targetBlockIndex","getBlockIndex","getClientIdsOfDescendants","moveBlocksToPosition","insertBlocks","clearSelectedBlock","sourceRootClientId","sourceClientIds","dropType","sourceBlockIndex","includes","some","id","isAtSameLevel","draggedBlockCount","length","insertIndex","onFilesDrop","hasUploadPermissions","updateBlockAttributes","files","transformation","transform","isMatch","onHTMLDrop","HTML","mode","useOnBlockDrop","select","_getBlockIndex","_getClientIdsOfDescendants","getSettings","mediaUpload","onDrop"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tfindTransform,\n\tgetBlockTransforms,\n\tpasteHandler,\n} from '@wordpress/blocks';\nimport { useDispatch, useSelect } from '@wordpress/data';\n\n/** @typedef {import('@wordpress/element').WPSyntheticEvent} WPSyntheticEvent */\n\n/**\n * Retrieve the data for a block drop event.\n *\n * @param {WPSyntheticEvent} event The drop event.\n *\n * @return {Object} An object with block drag and drop data.\n */\nexport function parseDropEvent( event ) {\n\tlet result = {\n\t\tsrcRootClientId: null,\n\t\tsrcClientIds: null,\n\t\tsrcIndex: null,\n\t\ttype: null,\n\t\tblocks: null,\n\t};\n\n\tif ( ! event.dataTransfer ) {\n\t\treturn result;\n\t}\n\n\ttry {\n\t\tresult = Object.assign(\n\t\t\tresult,\n\t\t\tJSON.parse( event.dataTransfer.getData( 'text' ) )\n\t\t);\n\t} catch ( err ) {\n\t\treturn result;\n\t}\n\n\treturn result;\n}\n\n/**\n * A function that returns an event handler function for block drop events.\n *\n * @param {string} targetRootClientId        The root client id where the block(s) will be inserted.\n * @param {number} targetBlockIndex          The index where the block(s) will be inserted.\n * @param {Function} getBlockIndex             A function that gets the index of a block.\n * @param {Function} getClientIdsOfDescendants A function that gets the client ids of descendant blocks.\n * @param {Function} moveBlocksToPosition      A function that moves blocks.\n * @param {Function} insertBlocks              A function that inserts blocks.\n * @param {Function} clearSelectedBlock        A function that clears block selection.\n * @return {Function} The event handler for a block drop event.\n */\nexport function onBlockDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\tgetBlockIndex,\n\tgetClientIdsOfDescendants,\n\tmoveBlocksToPosition,\n\tinsertBlocks,\n\tclearSelectedBlock\n) {\n\treturn ( event ) => {\n\t\tconst {\n\t\t\tsrcRootClientId: sourceRootClientId,\n\t\t\tsrcClientIds: sourceClientIds,\n\t\t\ttype: dropType,\n\t\t\tblocks,\n\t\t} = parseDropEvent( event );\n\n\t\t// If the user is inserting a block\n\t\tif ( dropType === 'inserter' ) {\n\t\t\tclearSelectedBlock();\n\t\t\tinsertBlocks( blocks, targetBlockIndex, targetRootClientId, false );\n\t\t}\n\n\t\t// If the user is moving a block\n\t\tif ( dropType === 'block' ) {\n\t\t\tconst sourceBlockIndex = getBlockIndex(\n\t\t\t\tsourceClientIds[ 0 ],\n\t\t\t\tsourceRootClientId\n\t\t\t);\n\n\t\t\t// If the user is dropping to the same position, return early.\n\t\t\tif (\n\t\t\t\tsourceRootClientId === targetRootClientId &&\n\t\t\t\tsourceBlockIndex === targetBlockIndex\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the user is attempting to drop a block within its own\n\t\t\t// nested blocks, return early as this would create infinite\n\t\t\t// recursion.\n\t\t\tif (\n\t\t\t\tsourceClientIds.includes( targetRootClientId ) ||\n\t\t\t\tgetClientIdsOfDescendants( sourceClientIds ).some(\n\t\t\t\t\t( id ) => id === targetRootClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isAtSameLevel = sourceRootClientId === targetRootClientId;\n\t\t\tconst draggedBlockCount = sourceClientIds.length;\n\n\t\t\t// If the block is kept at the same level and moved downwards,\n\t\t\t// subtract to take into account that the blocks being dragged\n\t\t\t// were removed from the block list above the insertion point.\n\t\t\tconst insertIndex =\n\t\t\t\tisAtSameLevel && sourceBlockIndex < targetBlockIndex\n\t\t\t\t\t? targetBlockIndex - draggedBlockCount\n\t\t\t\t\t: targetBlockIndex;\n\n\t\t\tmoveBlocksToPosition(\n\t\t\t\tsourceClientIds,\n\t\t\t\tsourceRootClientId,\n\t\t\t\ttargetRootClientId,\n\t\t\t\tinsertIndex\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related file drop events.\n *\n * @param {string}   targetRootClientId    The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex      The index where the block(s) will be inserted.\n * @param {boolean}  hasUploadPermissions  Whether the user has upload permissions.\n * @param {Function} updateBlockAttributes A function that updates a block's attributes.\n * @param {Function} insertBlocks          A function that inserts blocks.\n *\n * @return {Function} The event handler for a block-related file drop event.\n */\nexport function onFilesDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\thasUploadPermissions,\n\tupdateBlockAttributes,\n\tinsertBlocks\n) {\n\treturn ( files ) => {\n\t\tif ( ! hasUploadPermissions ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst transformation = findTransform(\n\t\t\tgetBlockTransforms( 'from' ),\n\t\t\t( transform ) =>\n\t\t\t\ttransform.type === 'files' && transform.isMatch( files )\n\t\t);\n\n\t\tif ( transformation ) {\n\t\t\tconst blocks = transformation.transform(\n\t\t\t\tfiles,\n\t\t\t\tupdateBlockAttributes\n\t\t\t);\n\t\t\tinsertBlocks( blocks, targetBlockIndex, targetRootClientId );\n\t\t}\n\t};\n}\n\n/**\n * A function that returns an event handler function for block-related HTML drop events.\n *\n * @param {string}   targetRootClientId The root client id where the block(s) will be inserted.\n * @param {number}   targetBlockIndex   The index where the block(s) will be inserted.\n * @param {Function} insertBlocks       A function that inserts blocks.\n *\n * @return {Function} The event handler for a block-related HTML drop event.\n */\nexport function onHTMLDrop(\n\ttargetRootClientId,\n\ttargetBlockIndex,\n\tinsertBlocks\n) {\n\treturn ( HTML ) => {\n\t\tconst blocks = pasteHandler( { HTML, mode: 'BLOCKS' } );\n\n\t\tif ( blocks.length ) {\n\t\t\tinsertBlocks( blocks, targetBlockIndex, targetRootClientId );\n\t\t}\n\t};\n}\n\n/**\n * A React hook for handling block drop events.\n *\n * @param {string} targetRootClientId The root client id where the block(s) will be inserted.\n * @param {number} targetBlockIndex   The index where the block(s) will be inserted.\n *\n * @return {Object} An object that contains the event handlers `onDrop`, `onFilesDrop` and `onHTMLDrop`.\n */\nexport default function useOnBlockDrop( targetRootClientId, targetBlockIndex ) {\n\tconst {\n\t\tgetBlockIndex,\n\t\tgetClientIdsOfDescendants,\n\t\thasUploadPermissions,\n\t} = useSelect( ( select ) => {\n\t\tconst {\n\t\t\tgetBlockIndex: _getBlockIndex,\n\t\t\tgetClientIdsOfDescendants: _getClientIdsOfDescendants,\n\t\t\tgetSettings,\n\t\t} = select( 'core/block-editor' );\n\n\t\treturn {\n\t\t\tgetBlockIndex: _getBlockIndex,\n\t\t\tgetClientIdsOfDescendants: _getClientIdsOfDescendants,\n\t\t\thasUploadPermissions: getSettings().mediaUpload,\n\t\t};\n\t}, [] );\n\n\tconst {\n\t\tinsertBlocks,\n\t\tmoveBlocksToPosition,\n\t\tupdateBlockAttributes,\n\t\tclearSelectedBlock,\n\t} = useDispatch( 'core/block-editor' );\n\n\treturn {\n\t\tonDrop: onBlockDrop(\n\t\t\ttargetRootClientId,\n\t\t\ttargetBlockIndex,\n\t\t\tgetBlockIndex,\n\t\t\tgetClientIdsOfDescendants,\n\t\t\tmoveBlocksToPosition,\n\t\t\tinsertBlocks,\n\t\t\tclearSelectedBlock\n\t\t),\n\t\tonFilesDrop: onFilesDrop(\n\t\t\ttargetRootClientId,\n\t\t\ttargetBlockIndex,\n\t\t\thasUploadPermissions,\n\t\t\tupdateBlockAttributes,\n\t\t\tinsertBlocks\n\t\t),\n\t\tonHTMLDrop: onHTMLDrop(\n\t\t\ttargetRootClientId,\n\t\t\ttargetBlockIndex,\n\t\t\tinsertBlocks\n\t\t),\n\t};\n}\n"]}