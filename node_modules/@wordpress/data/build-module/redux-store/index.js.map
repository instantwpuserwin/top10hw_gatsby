{"version":3,"sources":["@wordpress/data/src/redux-store/index.js"],"names":["createStore","applyMiddleware","flowRight","get","mapValues","combineReducers","EquivalentKeyMap","createReduxRoutineMiddleware","builtinControls","promise","createResolversCacheMiddleware","metadataReducer","metadataSelectors","metadataActions","createResolversCache","cache","isRunning","selectorName","args","clear","delete","markAsRunning","set","createReduxStore","key","options","name","instantiate","registry","reducer","store","instantiateReduxStore","resolversCache","resolvers","actions","mapActions","selectors","mapSelectors","selector","state","metadata","isRegistrySelector","root","result","mapResolvers","getSelectors","getActions","__unstableOriginalGetState","getState","subscribe","listener","lastState","hasChanged","controls","normalizedControls","control","isRegistryControl","middlewares","enhancers","window","__REDUX_DEVTOOLS_EXTENSION__","push","instanceId","initialState","enhancedReducer","createStateSelector","registrySelector","runSelector","argsLength","arguments","length","Array","i","hasResolver","createBoundAction","action","Promise","resolve","dispatch","mappedResolvers","resolver","fulfill","mapSelector","selectorResolver","fulfillSelector","isFulfilled","hasStartedResolution","setTimeout","startResolution","fulfillResolver","finishResolution"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport { flowRight, get, mapValues } from 'lodash';\nimport combineReducers from 'turbo-combine-reducers';\nimport EquivalentKeyMap from 'equivalent-key-map';\n\n/**\n * WordPress dependencies\n */\nimport createReduxRoutineMiddleware from '@wordpress/redux-routine';\n\n/**\n * Internal dependencies\n */\nimport { builtinControls } from '../controls';\nimport promise from '../promise-middleware';\nimport createResolversCacheMiddleware from '../resolvers-cache-middleware';\nimport metadataReducer from './metadata/reducer';\nimport * as metadataSelectors from './metadata/selectors';\nimport * as metadataActions from './metadata/actions';\n\n/** @typedef {import('../types').WPDataRegistry} WPDataRegistry */\n/** @typedef {import('../types').WPDataStore} WPDataStore */\n/** @typedef {import('../types').WPDataReduxStoreConfig} WPDataReduxStoreConfig */\n\n/**\n * Create a cache to track whether resolvers started running or not.\n *\n * @return {Object} Resolvers Cache.\n */\nfunction createResolversCache() {\n\tconst cache = {};\n\treturn {\n\t\tisRunning( selectorName, args ) {\n\t\t\treturn cache[ selectorName ] && cache[ selectorName ].get( args );\n\t\t},\n\n\t\tclear( selectorName, args ) {\n\t\t\tif ( cache[ selectorName ] ) {\n\t\t\t\tcache[ selectorName ].delete( args );\n\t\t\t}\n\t\t},\n\n\t\tmarkAsRunning( selectorName, args ) {\n\t\t\tif ( ! cache[ selectorName ] ) {\n\t\t\t\tcache[ selectorName ] = new EquivalentKeyMap();\n\t\t\t}\n\n\t\t\tcache[ selectorName ].set( args, true );\n\t\t},\n\t};\n}\n\n/**\n * Creates a data store definition for the provided Redux store options containing\n * properties describing reducer, actions, selectors, controls and resolvers.\n *\n * @example\n * ```js\n * import { createReduxStore } from '@wordpress/data';\n *\n * const store = createReduxStore( 'demo', {\n *     reducer: ( state = 'OK' ) => state,\n *     selectors: {\n *         getValue: ( state ) => state,\n *     },\n * } );\n * ```\n *\n * @param {string}                 key      Unique namespace identifier.\n * @param {WPDataReduxStoreConfig} options  Registered store options, with properties\n *                                          describing reducer, actions, selectors,\n *                                          and resolvers.\n *\n * @return {WPDataStore} Store Object.\n */\nexport default function createReduxStore( key, options ) {\n\treturn {\n\t\tname: key,\n\t\tinstantiate: ( registry ) => {\n\t\t\tconst reducer = options.reducer;\n\t\t\tconst store = instantiateReduxStore( key, options, registry );\n\t\t\tconst resolversCache = createResolversCache();\n\n\t\t\tlet resolvers;\n\t\t\tconst actions = mapActions(\n\t\t\t\t{\n\t\t\t\t\t...metadataActions,\n\t\t\t\t\t...options.actions,\n\t\t\t\t},\n\t\t\t\tstore\n\t\t\t);\n\t\t\tlet selectors = mapSelectors(\n\t\t\t\t{\n\t\t\t\t\t...mapValues(\n\t\t\t\t\t\tmetadataSelectors,\n\t\t\t\t\t\t( selector ) => ( state, ...args ) =>\n\t\t\t\t\t\t\tselector( state.metadata, ...args )\n\t\t\t\t\t),\n\t\t\t\t\t...mapValues( options.selectors, ( selector ) => {\n\t\t\t\t\t\tif ( selector.isRegistrySelector ) {\n\t\t\t\t\t\t\tselector.registry = registry;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn ( state, ...args ) =>\n\t\t\t\t\t\t\tselector( state.root, ...args );\n\t\t\t\t\t} ),\n\t\t\t\t},\n\t\t\t\tstore\n\t\t\t);\n\t\t\tif ( options.resolvers ) {\n\t\t\t\tconst result = mapResolvers(\n\t\t\t\t\toptions.resolvers,\n\t\t\t\t\tselectors,\n\t\t\t\t\tstore,\n\t\t\t\t\tresolversCache\n\t\t\t\t);\n\t\t\t\tresolvers = result.resolvers;\n\t\t\t\tselectors = result.selectors;\n\t\t\t}\n\n\t\t\tconst getSelectors = () => selectors;\n\t\t\tconst getActions = () => actions;\n\n\t\t\t// We have some modules monkey-patching the store object\n\t\t\t// It's wrong to do so but until we refactor all of our effects to controls\n\t\t\t// We need to keep the same \"store\" instance here.\n\t\t\tstore.__unstableOriginalGetState = store.getState;\n\t\t\tstore.getState = () => store.__unstableOriginalGetState().root;\n\n\t\t\t// Customize subscribe behavior to call listeners only on effective change,\n\t\t\t// not on every dispatch.\n\t\t\tconst subscribe =\n\t\t\t\tstore &&\n\t\t\t\t( ( listener ) => {\n\t\t\t\t\tlet lastState = store.__unstableOriginalGetState();\n\t\t\t\t\treturn store.subscribe( () => {\n\t\t\t\t\t\tconst state = store.__unstableOriginalGetState();\n\t\t\t\t\t\tconst hasChanged = state !== lastState;\n\t\t\t\t\t\tlastState = state;\n\n\t\t\t\t\t\tif ( hasChanged ) {\n\t\t\t\t\t\t\tlistener();\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} );\n\n\t\t\t// This can be simplified to just { subscribe, getSelectors, getActions }\n\t\t\t// Once we remove the use function.\n\t\t\treturn {\n\t\t\t\treducer,\n\t\t\t\tstore,\n\t\t\t\tactions,\n\t\t\t\tselectors,\n\t\t\t\tresolvers,\n\t\t\t\tgetSelectors,\n\t\t\t\tgetActions,\n\t\t\t\tsubscribe,\n\t\t\t};\n\t\t},\n\t};\n}\n\n/**\n * Creates a redux store for a namespace.\n *\n * @param {string}         key      Unique namespace identifier.\n * @param {Object}         options  Registered store options, with properties\n *                                  describing reducer, actions, selectors,\n *                                  and resolvers.\n * @param {WPDataRegistry} registry Registry reference.\n *\n * @return {Object} Newly created redux store.\n */\nfunction instantiateReduxStore( key, options, registry ) {\n\tconst controls = {\n\t\t...options.controls,\n\t\t...builtinControls,\n\t};\n\n\tconst normalizedControls = mapValues( controls, ( control ) =>\n\t\tcontrol.isRegistryControl ? control( registry ) : control\n\t);\n\n\tconst middlewares = [\n\t\tcreateResolversCacheMiddleware( registry, key ),\n\t\tpromise,\n\t\tcreateReduxRoutineMiddleware( normalizedControls ),\n\t];\n\n\tconst enhancers = [ applyMiddleware( ...middlewares ) ];\n\tif (\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__\n\t) {\n\t\tenhancers.push(\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__( {\n\t\t\t\tname: key,\n\t\t\t\tinstanceId: key,\n\t\t\t} )\n\t\t);\n\t}\n\n\tconst { reducer, initialState } = options;\n\tconst enhancedReducer = combineReducers( {\n\t\tmetadata: metadataReducer,\n\t\troot: reducer,\n\t} );\n\n\treturn createStore(\n\t\tenhancedReducer,\n\t\t{ root: initialState },\n\t\tflowRight( enhancers )\n\t);\n}\n\n/**\n * Maps selectors to a store.\n *\n * @param {Object} selectors Selectors to register. Keys will be used as the\n *                           public facing API. Selectors will get passed the\n *                           state as first argument.\n * @param {Object} store     The store to which the selectors should be mapped.\n * @return {Object} Selectors mapped to the provided store.\n */\nfunction mapSelectors( selectors, store ) {\n\tconst createStateSelector = ( registrySelector ) => {\n\t\tconst selector = function runSelector() {\n\t\t\t// This function is an optimized implementation of:\n\t\t\t//\n\t\t\t//   selector( store.getState(), ...arguments )\n\t\t\t//\n\t\t\t// Where the above would incur an `Array#concat` in its application,\n\t\t\t// the logic here instead efficiently constructs an arguments array via\n\t\t\t// direct assignment.\n\t\t\tconst argsLength = arguments.length;\n\t\t\tconst args = new Array( argsLength + 1 );\n\t\t\targs[ 0 ] = store.__unstableOriginalGetState();\n\t\t\tfor ( let i = 0; i < argsLength; i++ ) {\n\t\t\t\targs[ i + 1 ] = arguments[ i ];\n\t\t\t}\n\n\t\t\treturn registrySelector( ...args );\n\t\t};\n\t\tselector.hasResolver = false;\n\t\treturn selector;\n\t};\n\n\treturn mapValues( selectors, createStateSelector );\n}\n\n/**\n * Maps actions to dispatch from a given store.\n *\n * @param {Object} actions    Actions to register.\n * @param {Object} store      The redux store to which the actions should be mapped.\n * @return {Object}           Actions mapped to the redux store provided.\n */\nfunction mapActions( actions, store ) {\n\tconst createBoundAction = ( action ) => ( ...args ) => {\n\t\treturn Promise.resolve( store.dispatch( action( ...args ) ) );\n\t};\n\n\treturn mapValues( actions, createBoundAction );\n}\n\n/**\n * Returns resolvers with matched selectors for a given namespace.\n * Resolvers are side effects invoked once per argument set of a given selector call,\n * used in ensuring that the data needs for the selector are satisfied.\n *\n * @param {Object} resolvers      Resolvers to register.\n * @param {Object} selectors      The current selectors to be modified.\n * @param {Object} store          The redux store to which the resolvers should be mapped.\n * @param {Object} resolversCache Resolvers Cache.\n */\nfunction mapResolvers( resolvers, selectors, store, resolversCache ) {\n\t// The `resolver` can be either a function that does the resolution, or, in more advanced\n\t// cases, an object with a `fullfill` method and other optional methods like `isFulfilled`.\n\t// Here we normalize the `resolver` function to an object with `fulfill` method.\n\tconst mappedResolvers = mapValues( resolvers, ( resolver ) => {\n\t\tif ( resolver.fulfill ) {\n\t\t\treturn resolver;\n\t\t}\n\n\t\treturn {\n\t\t\t...resolver, // copy the enumerable properties of the resolver function\n\t\t\tfulfill: resolver, // add the fulfill method\n\t\t};\n\t} );\n\n\tconst mapSelector = ( selector, selectorName ) => {\n\t\tconst resolver = resolvers[ selectorName ];\n\t\tif ( ! resolver ) {\n\t\t\tselector.hasResolver = false;\n\t\t\treturn selector;\n\t\t}\n\n\t\tconst selectorResolver = ( ...args ) => {\n\t\t\tasync function fulfillSelector() {\n\t\t\t\tconst state = store.getState();\n\t\t\t\tif (\n\t\t\t\t\tresolversCache.isRunning( selectorName, args ) ||\n\t\t\t\t\t( typeof resolver.isFulfilled === 'function' &&\n\t\t\t\t\t\tresolver.isFulfilled( state, ...args ) )\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { metadata } = store.__unstableOriginalGetState();\n\n\t\t\t\tif (\n\t\t\t\t\tmetadataSelectors.hasStartedResolution(\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t\tselectorName,\n\t\t\t\t\t\targs\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolversCache.markAsRunning( selectorName, args );\n\n\t\t\t\tsetTimeout( async () => {\n\t\t\t\t\tresolversCache.clear( selectorName, args );\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tmetadataActions.startResolution( selectorName, args )\n\t\t\t\t\t);\n\t\t\t\t\tawait fulfillResolver(\n\t\t\t\t\t\tstore,\n\t\t\t\t\t\tmappedResolvers,\n\t\t\t\t\t\tselectorName,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t\tstore.dispatch(\n\t\t\t\t\t\tmetadataActions.finishResolution( selectorName, args )\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tfulfillSelector( ...args );\n\t\t\treturn selector( ...args );\n\t\t};\n\t\tselectorResolver.hasResolver = true;\n\t\treturn selectorResolver;\n\t};\n\n\treturn {\n\t\tresolvers: mappedResolvers,\n\t\tselectors: mapValues( selectors, mapSelector ),\n\t};\n}\n\n/**\n * Calls a resolver given arguments\n *\n * @param {Object} store        Store reference, for fulfilling via resolvers\n * @param {Object} resolvers    Store Resolvers\n * @param {string} selectorName Selector name to fulfill.\n * @param {Array} args          Selector Arguments.\n */\nasync function fulfillResolver( store, resolvers, selectorName, ...args ) {\n\tconst resolver = get( resolvers, [ selectorName ] );\n\tif ( ! resolver ) {\n\t\treturn;\n\t}\n\n\tconst action = resolver.fulfill( ...args );\n\tif ( action ) {\n\t\tawait store.dispatch( action );\n\t}\n}\n"]}